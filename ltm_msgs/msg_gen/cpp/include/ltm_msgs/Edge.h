/* Auto-generated by genmsg_cpp for file /usr0/home/venkatrn/groovy_workspace/sandbox/ltm_msgs/msg/Edge.msg */
#ifndef LTM_MSGS_MESSAGE_EDGE_H
#define LTM_MSGS_MESSAGE_EDGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ltm_msgs
{
template <class ContainerAllocator>
struct Edge_ {
  typedef Edge_<ContainerAllocator> Type;

  Edge_()
  : nodes()
  , joint_type(0)
  , normal()
  , radius(0.0)
  {
    nodes.assign(0);
    normal.assign(0.0);
  }

  Edge_(const ContainerAllocator& _alloc)
  : nodes()
  , joint_type(0)
  , normal()
  , radius(0.0)
  {
    nodes.assign(0);
    normal.assign(0.0);
  }

  typedef boost::array<int64_t, 2>  _nodes_type;
  boost::array<int64_t, 2>  nodes;

  typedef int64_t _joint_type_type;
  int64_t joint_type;

  typedef boost::array<double, 3>  _normal_type;
  boost::array<double, 3>  normal;

  typedef double _radius_type;
  double radius;


  typedef boost::shared_ptr< ::ltm_msgs::Edge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ltm_msgs::Edge_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Edge
typedef  ::ltm_msgs::Edge_<std::allocator<void> > Edge;

typedef boost::shared_ptr< ::ltm_msgs::Edge> EdgePtr;
typedef boost::shared_ptr< ::ltm_msgs::Edge const> EdgeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ltm_msgs::Edge_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ltm_msgs::Edge_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ltm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ltm_msgs::Edge_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ltm_msgs::Edge_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ltm_msgs::Edge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "579b74c29c44006194d089ec27bca55c";
  }

  static const char* value(const  ::ltm_msgs::Edge_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x579b74c29c440061ULL;
  static const uint64_t static_value2 = 0x94d089ec27bca55cULL;
};

template<class ContainerAllocator>
struct DataType< ::ltm_msgs::Edge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ltm_msgs/Edge";
  }

  static const char* value(const  ::ltm_msgs::Edge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ltm_msgs::Edge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64[2] nodes\n\
int64 joint_type\n\
float64[3] normal\n\
float64 radius\n\
\n\
";
  }

  static const char* value(const  ::ltm_msgs::Edge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ltm_msgs::Edge_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ltm_msgs::Edge_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nodes);
    stream.next(m.joint_type);
    stream.next(m.normal);
    stream.next(m.radius);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Edge_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ltm_msgs::Edge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ltm_msgs::Edge_<ContainerAllocator> & v) 
  {
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.nodes[i]);
    }
    s << indent << "joint_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.joint_type);
    s << indent << "normal[]" << std::endl;
    for (size_t i = 0; i < v.normal.size(); ++i)
    {
      s << indent << "  normal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal[i]);
    }
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LTM_MSGS_MESSAGE_EDGE_H

