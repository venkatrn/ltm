"""autogenerated by genpy from ltm_msgs/Edge.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Edge(genpy.Message):
  _md5sum = "579b74c29c44006194d089ec27bca55c"
  _type = "ltm_msgs/Edge"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64[2] nodes
int64 joint_type
float64[3] normal
float64 radius

"""
  __slots__ = ['nodes','joint_type','normal','radius']
  _slot_types = ['int64[2]','int64','float64[3]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nodes,joint_type,normal,radius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Edge, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nodes is None:
        self.nodes = [0,0]
      if self.joint_type is None:
        self.joint_type = 0
      if self.normal is None:
        self.normal = [0.,0.,0.]
      if self.radius is None:
        self.radius = 0.
    else:
      self.nodes = [0,0]
      self.joint_type = 0
      self.normal = [0.,0.,0.]
      self.radius = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_2q.pack(*self.nodes))
      buff.write(_struct_q.pack(self.joint_type))
      buff.write(_struct_3d.pack(*self.normal))
      buff.write(_struct_d.pack(self.radius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.nodes = _struct_2q.unpack(str[start:end])
      start = end
      end += 8
      (self.joint_type,) = _struct_q.unpack(str[start:end])
      start = end
      end += 24
      self.normal = _struct_3d.unpack(str[start:end])
      start = end
      end += 8
      (self.radius,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.nodes.tostring())
      buff.write(_struct_q.pack(self.joint_type))
      buff.write(self.normal.tostring())
      buff.write(_struct_d.pack(self.radius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.nodes = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=2)
      start = end
      end += 8
      (self.joint_type,) = _struct_q.unpack(str[start:end])
      start = end
      end += 24
      self.normal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.radius,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
_struct_d = struct.Struct("<d")
_struct_2q = struct.Struct("<2q")
_struct_3d = struct.Struct("<3d")
