"""autogenerated by genpy from ltm_msgs/DModel.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ltm_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class DModel(genpy.Message):
  _md5sum = "50a566339aa89b9aa728558673bc6645"
  _type = "ltm_msgs/DModel"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseArray points
ltm_msgs/Edge[] edges


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ltm_msgs/Edge
int64[2] nodes
int64 joint_type
float64[3] normal
float64 radius

"""
  __slots__ = ['points','edges']
  _slot_types = ['geometry_msgs/PoseArray','ltm_msgs/Edge[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       points,edges

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DModel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.points is None:
        self.points = geometry_msgs.msg.PoseArray()
      if self.edges is None:
        self.edges = []
    else:
      self.points = geometry_msgs.msg.PoseArray()
      self.edges = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.points.header.seq, _x.points.header.stamp.secs, _x.points.header.stamp.nsecs))
      _x = self.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.points.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        buff.write(_struct_2q.pack(*val1.nodes))
        buff.write(_struct_q.pack(val1.joint_type))
        buff.write(_struct_3d.pack(*val1.normal))
        buff.write(_struct_d.pack(val1.radius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = geometry_msgs.msg.PoseArray()
      if self.edges is None:
        self.edges = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.points.header.seq, _x.points.header.stamp.secs, _x.points.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.points.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.points.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = ltm_msgs.msg.Edge()
        start = end
        end += 16
        val1.nodes = _struct_2q.unpack(str[start:end])
        start = end
        end += 8
        (val1.joint_type,) = _struct_q.unpack(str[start:end])
        start = end
        end += 24
        val1.normal = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _struct_d.unpack(str[start:end])
        self.edges.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.points.header.seq, _x.points.header.stamp.secs, _x.points.header.stamp.nsecs))
      _x = self.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.points.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.points.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.edges:
        buff.write(val1.nodes.tostring())
        buff.write(_struct_q.pack(val1.joint_type))
        buff.write(val1.normal.tostring())
        buff.write(_struct_d.pack(val1.radius))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = geometry_msgs.msg.PoseArray()
      if self.edges is None:
        self.edges = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.points.header.seq, _x.points.header.stamp.secs, _x.points.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.points.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.points.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.edges = []
      for i in range(0, length):
        val1 = ltm_msgs.msg.Edge()
        start = end
        end += 16
        val1.nodes = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=2)
        start = end
        end += 8
        (val1.joint_type,) = _struct_q.unpack(str[start:end])
        start = end
        end += 24
        val1.normal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 8
        (val1.radius,) = _struct_d.unpack(str[start:end])
        self.edges.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2q = struct.Struct("<2q")
_struct_q = struct.Struct("<q")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
_struct_d = struct.Struct("<d")
