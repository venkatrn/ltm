"""autogenerated by genpy from articulation_msgs/AlignModelSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import geometry_msgs.msg
import articulation_msgs.msg
import std_msgs.msg

class AlignModelSrvRequest(genpy.Message):
  _md5sum = "5c799f696feeb9619c32ac4dd7352a60"
  _type = "articulation_msgs/AlignModelSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """






articulation_msgs/ModelMsg model
articulation_msgs/ModelMsg data

================================================================================
MSG: articulation_msgs/ModelMsg
# Single kinematic model
#
# A kinematic model is defined by its model class name, and a set of parameters. 
# The client may additionally specify a model id, that can be used to colorize the
# model when visualized using the RVIZ model display.
# 
# For a list of currently implemented models, see the documetation at
# http://www.ros.org/wiki/articulation_models
#
#

std_msgs/Header header                        # frame and timestamp

int32 id                             # user specified model id
string name                          # name of the model family (e.g. "rotational",
                                     # "prismatic", "pca-gp", "rigid")
articulation_msgs/ParamMsg[] params  # model parameters
articulation_msgs/TrackMsg track     # trajectory from which the model is estimated, or
                                     # that is evaluated using the model

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: articulation_msgs/ParamMsg
# Single parameter passed to or from model fitting
#
# This mechanism allows to flexibly pass parameters to 
# model fitting (and vice versa). Note that these parameters 
# are model-specific: A client may supply additional
# parameters to the model estimator, and, similarly, a estimator
# may add the estimated model parameters to the model message.
# When the model is then evaluated, for example to make predictions
# or to compute the likelihood, the model class can then use
# these parameters.
#
# A parameter has a name, a value, and a type. The type globally
# indicates whether it is a prior parameter (prior to model fitting),
# or a model parameter (found during model fitting, using a maximum-
# likelihood estimator), or a cached evaluation (e.g., the likelihood
# or the BIC are a typical "side"-product of model estimation, and
# can therefore already be cached).
#
# For a list of currently used parameters, see the documentation at
# http://www.ros.org/wiki/articulation_models
#

uint8 PRIOR=0   # indicates a prior model parameter 
                # (e.g., "sigma_position")
uint8 PARAM=1   # indicates a estimated model parameter 
                # (e.g., "rot_radius", the estimated radius)
uint8 EVAL=2    # indicates a cached evaluation of the model, given 
                # the current trajectory
                # (e.g., "loglikelihood", the log likelihood of the
                # data, given the model and its parameters)

string name     # name of the parameter
float64 value   # value of the parameter
uint8 type      # type of the parameter (PRIOR, PARAM, EVAL)


================================================================================
MSG: articulation_msgs/TrackMsg
# Single kinematic trajectory
#
# This message contains a kinematic trajectory. The trajectory is specified
# as a vector of 6D poses. An additional flag, track_type, indicates whether
# the track is valid, and whether it includes orientation. The track id
# can be used for automatic coloring in the RVIZ track plugin, and can be 
# freely chosen by the client. 
#
# A model is fitting only from the trajectory stored in the pose[]-vector. 
# Additional information may be associated to each pose using the channels
# vector, with arbitrary # fields (e.g., to include applied/measured forces). 
#
# After model evaluation,
# also the associated configurations of the object are stored in the channels,
# named "q[0]".."q[DOF-1]", where DOF is the number of degrees of freedom.
# Model evaluation also projects the poses in the pose vector onto the model,
# and stores these ideal poses in the vector pose_projected. Further, during model
# evaluation, a new set of (uniform) configurations over the valid configuration
# range is sampled, and the result is stored in pose_resampled.
# The vector pose_flags contains additional display flags for the poses in the
# pose vector, for example, whether a pose is visible and/or
# the end of a trajectory segment. At the moment, this is only used by the
# prior_model_learner.
#

std_msgs/Header header                        # frame and timestamp
int32 id                                # used-specified track id

geometry_msgs/Pose[] pose               # sequence of poses, defining the observed trajectory
std_msgs/Header[] pose_headers                   # Timestamp and frame for each pose (and pose_projected)
geometry_msgs/Pose[] pose_projected     # sequence of poses, projected to the model 
                                        # (after model evaluation)
geometry_msgs/Pose[] pose_resampled     # sequence of poses, re-sampled from the model in
                                        # the valid configuration range
uint32[] pose_flags                     # bit-wise combination of POSE_VISIBLE and POSE_END_OF_SEGMENT

uint32 POSE_VISIBLE=1
uint32 POSE_END_OF_SEGMENT=2

# Each channel should have the same number of elements as pose array, 
# and the data in each channel should correspond 1:1 with each pose
# possible channels: "width", "height", "rgb", ...
sensor_msgs/ChannelFloat32[] channels       



================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/ChannelFloat32
# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values

"""
  __slots__ = ['model','data']
  _slot_types = ['articulation_msgs/ModelMsg','articulation_msgs/ModelMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       model,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AlignModelSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.model is None:
        self.model = articulation_msgs.msg.ModelMsg()
      if self.data is None:
        self.data = articulation_msgs.msg.ModelMsg()
    else:
      self.model = articulation_msgs.msg.ModelMsg()
      self.data = articulation_msgs.msg.ModelMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.model.header.seq, _x.model.header.stamp.secs, _x.model.header.stamp.nsecs))
      _x = self.model.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model.id))
      _x = self.model.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.model.track.header.seq, _x.model.track.header.stamp.secs, _x.model.track.header.stamp.nsecs))
      _x = self.model.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model.track.id))
      length = len(self.model.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v3 = val1.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_projected:
        _v4 = val1.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_resampled:
        _v6 = val1.position
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = val1.orientation
        _x = _v7
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.model.track.pose_flags))
      length = len(self.model.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.values))
      _x = self
      buff.write(_struct_3I.pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data.id))
      _x = self.data.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.data.track.header.seq, _x.data.track.header.stamp.secs, _x.data.track.header.stamp.nsecs))
      _x = self.data.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data.track.id))
      length = len(self.data.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose:
        _v8 = val1.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v10 = val1.stamp
        _x = _v10
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_projected:
        _v11 = val1.position
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v12 = val1.orientation
        _x = _v12
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_resampled:
        _v13 = val1.position
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = val1.orientation
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.data.track.pose_flags))
      length = len(self.data.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.values))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.model is None:
        self.model = articulation_msgs.msg.ModelMsg()
      if self.data is None:
        self.data = articulation_msgs.msg.ModelMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.model.header.seq, _x.model.header.stamp.secs, _x.model.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.name = str[start:end].decode('utf-8')
      else:
        self.model.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.model.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.model.track.header.seq, _x.model.track.header.stamp.secs, _x.model.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v17 = val1.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.model.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v18 = val1.position
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v19 = val1.orientation
        _x = _v19
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v20 = val1.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v21 = val1.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.model.track.pose_flags = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.model.track.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.name = str[start:end].decode('utf-8')
      else:
        self.data.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.data.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data.track.header.seq, _x.data.track.header.stamp.secs, _x.data.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v22 = val1.position
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v23 = val1.orientation
        _x = _v23
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v24 = val1.stamp
        _x = _v24
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.data.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v25 = val1.position
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v26 = val1.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v27 = val1.position
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v28 = val1.orientation
        _x = _v28
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.data.track.pose_flags = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.data.track.channels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.model.header.seq, _x.model.header.stamp.secs, _x.model.header.stamp.nsecs))
      _x = self.model.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model.id))
      _x = self.model.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.model.track.header.seq, _x.model.track.header.stamp.secs, _x.model.track.header.stamp.nsecs))
      _x = self.model.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model.track.id))
      length = len(self.model.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose:
        _v29 = val1.position
        _x = _v29
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v30 = val1.orientation
        _x = _v30
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v31 = val1.stamp
        _x = _v31
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_projected:
        _v32 = val1.position
        _x = _v32
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v33 = val1.orientation
        _x = _v33
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.pose_resampled:
        _v34 = val1.position
        _x = _v34
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v35 = val1.orientation
        _x = _v35
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.model.track.pose_flags.tostring())
      length = len(self.model.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data.id))
      _x = self.data.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.data.track.header.seq, _x.data.track.header.stamp.secs, _x.data.track.header.stamp.nsecs))
      _x = self.data.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data.track.id))
      length = len(self.data.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose:
        _v36 = val1.position
        _x = _v36
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v37 = val1.orientation
        _x = _v37
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v38 = val1.stamp
        _x = _v38
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_projected:
        _v39 = val1.position
        _x = _v39
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v40 = val1.orientation
        _x = _v40
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.pose_resampled:
        _v41 = val1.position
        _x = _v41
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v42 = val1.orientation
        _x = _v42
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.data.track.pose_flags.tostring())
      length = len(self.data.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.data.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.model is None:
        self.model = articulation_msgs.msg.ModelMsg()
      if self.data is None:
        self.data = articulation_msgs.msg.ModelMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.model.header.seq, _x.model.header.stamp.secs, _x.model.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.name = str[start:end].decode('utf-8')
      else:
        self.model.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.model.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.model.track.header.seq, _x.model.track.header.stamp.secs, _x.model.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v43 = val1.position
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v44 = val1.orientation
        _x = _v44
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v45 = val1.stamp
        _x = _v45
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.model.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v46 = val1.position
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v47 = val1.orientation
        _x = _v47
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v48 = val1.position
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v49 = val1.orientation
        _x = _v49
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.model.track.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.model.track.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.name = str[start:end].decode('utf-8')
      else:
        self.data.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.data.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data.track.header.seq, _x.data.track.header.stamp.secs, _x.data.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v50 = val1.position
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v51 = val1.orientation
        _x = _v51
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v52 = val1.stamp
        _x = _v52
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.data.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v53 = val1.position
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v54 = val1.orientation
        _x = _v54
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v55 = val1.position
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v56 = val1.orientation
        _x = _v56
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.data.track.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.data.track.channels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_dB = struct.Struct("<dB")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from articulation_msgs/AlignModelSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import geometry_msgs.msg
import articulation_msgs.msg
import std_msgs.msg

class AlignModelSrvResponse(genpy.Message):
  _md5sum = "244fd493a4121569c1e4d870714e7fc3"
  _type = "articulation_msgs/AlignModelSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """articulation_msgs/ModelMsg model_aligned


articulation_msgs/ModelMsg data_aligned


float64[9] R
float64[3] T
float64 dist_rot
float32 dist_trans



================================================================================
MSG: articulation_msgs/ModelMsg
# Single kinematic model
#
# A kinematic model is defined by its model class name, and a set of parameters. 
# The client may additionally specify a model id, that can be used to colorize the
# model when visualized using the RVIZ model display.
# 
# For a list of currently implemented models, see the documetation at
# http://www.ros.org/wiki/articulation_models
#
#

std_msgs/Header header                        # frame and timestamp

int32 id                             # user specified model id
string name                          # name of the model family (e.g. "rotational",
                                     # "prismatic", "pca-gp", "rigid")
articulation_msgs/ParamMsg[] params  # model parameters
articulation_msgs/TrackMsg track     # trajectory from which the model is estimated, or
                                     # that is evaluated using the model

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: articulation_msgs/ParamMsg
# Single parameter passed to or from model fitting
#
# This mechanism allows to flexibly pass parameters to 
# model fitting (and vice versa). Note that these parameters 
# are model-specific: A client may supply additional
# parameters to the model estimator, and, similarly, a estimator
# may add the estimated model parameters to the model message.
# When the model is then evaluated, for example to make predictions
# or to compute the likelihood, the model class can then use
# these parameters.
#
# A parameter has a name, a value, and a type. The type globally
# indicates whether it is a prior parameter (prior to model fitting),
# or a model parameter (found during model fitting, using a maximum-
# likelihood estimator), or a cached evaluation (e.g., the likelihood
# or the BIC are a typical "side"-product of model estimation, and
# can therefore already be cached).
#
# For a list of currently used parameters, see the documentation at
# http://www.ros.org/wiki/articulation_models
#

uint8 PRIOR=0   # indicates a prior model parameter 
                # (e.g., "sigma_position")
uint8 PARAM=1   # indicates a estimated model parameter 
                # (e.g., "rot_radius", the estimated radius)
uint8 EVAL=2    # indicates a cached evaluation of the model, given 
                # the current trajectory
                # (e.g., "loglikelihood", the log likelihood of the
                # data, given the model and its parameters)

string name     # name of the parameter
float64 value   # value of the parameter
uint8 type      # type of the parameter (PRIOR, PARAM, EVAL)


================================================================================
MSG: articulation_msgs/TrackMsg
# Single kinematic trajectory
#
# This message contains a kinematic trajectory. The trajectory is specified
# as a vector of 6D poses. An additional flag, track_type, indicates whether
# the track is valid, and whether it includes orientation. The track id
# can be used for automatic coloring in the RVIZ track plugin, and can be 
# freely chosen by the client. 
#
# A model is fitting only from the trajectory stored in the pose[]-vector. 
# Additional information may be associated to each pose using the channels
# vector, with arbitrary # fields (e.g., to include applied/measured forces). 
#
# After model evaluation,
# also the associated configurations of the object are stored in the channels,
# named "q[0]".."q[DOF-1]", where DOF is the number of degrees of freedom.
# Model evaluation also projects the poses in the pose vector onto the model,
# and stores these ideal poses in the vector pose_projected. Further, during model
# evaluation, a new set of (uniform) configurations over the valid configuration
# range is sampled, and the result is stored in pose_resampled.
# The vector pose_flags contains additional display flags for the poses in the
# pose vector, for example, whether a pose is visible and/or
# the end of a trajectory segment. At the moment, this is only used by the
# prior_model_learner.
#

std_msgs/Header header                        # frame and timestamp
int32 id                                # used-specified track id

geometry_msgs/Pose[] pose               # sequence of poses, defining the observed trajectory
std_msgs/Header[] pose_headers                   # Timestamp and frame for each pose (and pose_projected)
geometry_msgs/Pose[] pose_projected     # sequence of poses, projected to the model 
                                        # (after model evaluation)
geometry_msgs/Pose[] pose_resampled     # sequence of poses, re-sampled from the model in
                                        # the valid configuration range
uint32[] pose_flags                     # bit-wise combination of POSE_VISIBLE and POSE_END_OF_SEGMENT

uint32 POSE_VISIBLE=1
uint32 POSE_END_OF_SEGMENT=2

# Each channel should have the same number of elements as pose array, 
# and the data in each channel should correspond 1:1 with each pose
# possible channels: "width", "height", "rgb", ...
sensor_msgs/ChannelFloat32[] channels       



================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/ChannelFloat32
# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values

"""
  __slots__ = ['model_aligned','data_aligned','R','T','dist_rot','dist_trans']
  _slot_types = ['articulation_msgs/ModelMsg','articulation_msgs/ModelMsg','float64[9]','float64[3]','float64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       model_aligned,data_aligned,R,T,dist_rot,dist_trans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AlignModelSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.model_aligned is None:
        self.model_aligned = articulation_msgs.msg.ModelMsg()
      if self.data_aligned is None:
        self.data_aligned = articulation_msgs.msg.ModelMsg()
      if self.R is None:
        self.R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.T is None:
        self.T = [0.,0.,0.]
      if self.dist_rot is None:
        self.dist_rot = 0.
      if self.dist_trans is None:
        self.dist_trans = 0.
    else:
      self.model_aligned = articulation_msgs.msg.ModelMsg()
      self.data_aligned = articulation_msgs.msg.ModelMsg()
      self.R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.T = [0.,0.,0.]
      self.dist_rot = 0.
      self.dist_trans = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.model_aligned.header.seq, _x.model_aligned.header.stamp.secs, _x.model_aligned.header.stamp.nsecs))
      _x = self.model_aligned.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model_aligned.id))
      _x = self.model_aligned.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model_aligned.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.model_aligned.track.header.seq, _x.model_aligned.track.header.stamp.secs, _x.model_aligned.track.header.stamp.nsecs))
      _x = self.model_aligned.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model_aligned.track.id))
      length = len(self.model_aligned.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose:
        _v57 = val1.position
        _x = _v57
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v58 = val1.orientation
        _x = _v58
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v59 = val1.stamp
        _x = _v59
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model_aligned.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_projected:
        _v60 = val1.position
        _x = _v60
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v61 = val1.orientation
        _x = _v61
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_resampled:
        _v62 = val1.position
        _x = _v62
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v63 = val1.orientation
        _x = _v63
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.model_aligned.track.pose_flags))
      length = len(self.model_aligned.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.values))
      _x = self
      buff.write(_struct_3I.pack(_x.data_aligned.header.seq, _x.data_aligned.header.stamp.secs, _x.data_aligned.header.stamp.nsecs))
      _x = self.data_aligned.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data_aligned.id))
      _x = self.data_aligned.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data_aligned.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.data_aligned.track.header.seq, _x.data_aligned.track.header.stamp.secs, _x.data_aligned.track.header.stamp.nsecs))
      _x = self.data_aligned.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data_aligned.track.id))
      length = len(self.data_aligned.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose:
        _v64 = val1.position
        _x = _v64
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v65 = val1.orientation
        _x = _v65
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v66 = val1.stamp
        _x = _v66
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data_aligned.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_projected:
        _v67 = val1.position
        _x = _v67
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v68 = val1.orientation
        _x = _v68
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_resampled:
        _v69 = val1.position
        _x = _v69
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v70 = val1.orientation
        _x = _v70
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.data_aligned.track.pose_flags))
      length = len(self.data_aligned.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.values))
      buff.write(_struct_9d.pack(*self.R))
      buff.write(_struct_3d.pack(*self.T))
      _x = self
      buff.write(_struct_df.pack(_x.dist_rot, _x.dist_trans))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.model_aligned is None:
        self.model_aligned = articulation_msgs.msg.ModelMsg()
      if self.data_aligned is None:
        self.data_aligned = articulation_msgs.msg.ModelMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.model_aligned.header.seq, _x.model_aligned.header.stamp.secs, _x.model_aligned.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model_aligned.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model_aligned.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.name = str[start:end].decode('utf-8')
      else:
        self.model_aligned.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.model_aligned.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.model_aligned.track.header.seq, _x.model_aligned.track.header.stamp.secs, _x.model_aligned.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model_aligned.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model_aligned.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v71 = val1.position
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v72 = val1.orientation
        _x = _v72
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v73 = val1.stamp
        _x = _v73
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.model_aligned.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v74 = val1.position
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v75 = val1.orientation
        _x = _v75
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v76 = val1.position
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v77 = val1.orientation
        _x = _v77
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.model_aligned.track.pose_flags = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.model_aligned.track.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data_aligned.header.seq, _x.data_aligned.header.stamp.secs, _x.data_aligned.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data_aligned.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data_aligned.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.name = str[start:end].decode('utf-8')
      else:
        self.data_aligned.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.data_aligned.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data_aligned.track.header.seq, _x.data_aligned.track.header.stamp.secs, _x.data_aligned.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data_aligned.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data_aligned.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v78 = val1.position
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v79 = val1.orientation
        _x = _v79
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v80 = val1.stamp
        _x = _v80
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.data_aligned.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v81 = val1.position
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v82 = val1.orientation
        _x = _v82
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v83 = val1.position
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v84 = val1.orientation
        _x = _v84
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.data_aligned.track.pose_flags = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = struct.unpack(pattern, str[start:end])
        self.data_aligned.track.channels.append(val1)
      start = end
      end += 72
      self.R = _struct_9d.unpack(str[start:end])
      start = end
      end += 24
      self.T = _struct_3d.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.dist_rot, _x.dist_trans,) = _struct_df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.model_aligned.header.seq, _x.model_aligned.header.stamp.secs, _x.model_aligned.header.stamp.nsecs))
      _x = self.model_aligned.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model_aligned.id))
      _x = self.model_aligned.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model_aligned.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.model_aligned.track.header.seq, _x.model_aligned.track.header.stamp.secs, _x.model_aligned.track.header.stamp.nsecs))
      _x = self.model_aligned.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.model_aligned.track.id))
      length = len(self.model_aligned.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose:
        _v85 = val1.position
        _x = _v85
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v86 = val1.orientation
        _x = _v86
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v87 = val1.stamp
        _x = _v87
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.model_aligned.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_projected:
        _v88 = val1.position
        _x = _v88
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v89 = val1.orientation
        _x = _v89
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.pose_resampled:
        _v90 = val1.position
        _x = _v90
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v91 = val1.orientation
        _x = _v91
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.model_aligned.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.model_aligned.track.pose_flags.tostring())
      length = len(self.model_aligned.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_aligned.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.data_aligned.header.seq, _x.data_aligned.header.stamp.secs, _x.data_aligned.header.stamp.nsecs))
      _x = self.data_aligned.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data_aligned.id))
      _x = self.data_aligned.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data_aligned.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      _x = self
      buff.write(_struct_3I.pack(_x.data_aligned.track.header.seq, _x.data_aligned.track.header.stamp.secs, _x.data_aligned.track.header.stamp.nsecs))
      _x = self.data_aligned.track.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.data_aligned.track.id))
      length = len(self.data_aligned.track.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose:
        _v92 = val1.position
        _x = _v92
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v93 = val1.orientation
        _x = _v93
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_headers)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_headers:
        buff.write(_struct_I.pack(val1.seq))
        _v94 = val1.stamp
        _x = _v94
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.data_aligned.track.pose_projected)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_projected:
        _v95 = val1.position
        _x = _v95
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v96 = val1.orientation
        _x = _v96
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_resampled)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.pose_resampled:
        _v97 = val1.position
        _x = _v97
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v98 = val1.orientation
        _x = _v98
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.data_aligned.track.pose_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.data_aligned.track.pose_flags.tostring())
      length = len(self.data_aligned.track.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.data_aligned.track.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      buff.write(self.R.tostring())
      buff.write(self.T.tostring())
      _x = self
      buff.write(_struct_df.pack(_x.dist_rot, _x.dist_trans))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.model_aligned is None:
        self.model_aligned = articulation_msgs.msg.ModelMsg()
      if self.data_aligned is None:
        self.data_aligned = articulation_msgs.msg.ModelMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.model_aligned.header.seq, _x.model_aligned.header.stamp.secs, _x.model_aligned.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model_aligned.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model_aligned.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.name = str[start:end].decode('utf-8')
      else:
        self.model_aligned.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.model_aligned.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.model_aligned.track.header.seq, _x.model_aligned.track.header.stamp.secs, _x.model_aligned.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.model_aligned.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.model_aligned.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.model_aligned.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v99 = val1.position
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v100 = val1.orientation
        _x = _v100
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v101 = val1.stamp
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.model_aligned.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v102 = val1.position
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v103 = val1.orientation
        _x = _v103
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v104 = val1.position
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v105 = val1.orientation
        _x = _v105
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.model_aligned.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.model_aligned.track.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_aligned.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.model_aligned.track.channels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data_aligned.header.seq, _x.data_aligned.header.stamp.secs, _x.data_aligned.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data_aligned.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data_aligned.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.name = str[start:end].decode('utf-8')
      else:
        self.data_aligned.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.data_aligned.params.append(val1)
      _x = self
      start = end
      end += 12
      (_x.data_aligned.track.header.seq, _x.data_aligned.track.header.stamp.secs, _x.data_aligned.track.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_aligned.track.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.data_aligned.track.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.data_aligned.track.id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v106 = val1.position
        _x = _v106
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v107 = val1.orientation
        _x = _v107
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_headers = []
      for i in range(0, length):
        val1 = std_msgs.msg.Header()
        start = end
        end += 4
        (val1.seq,) = _struct_I.unpack(str[start:end])
        _v108 = val1.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_id = str[start:end].decode('utf-8')
        else:
          val1.frame_id = str[start:end]
        self.data_aligned.track.pose_headers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_projected = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v109 = val1.position
        _x = _v109
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v110 = val1.orientation
        _x = _v110
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose_projected.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.pose_resampled = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v111 = val1.position
        _x = _v111
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v112 = val1.orientation
        _x = _v112
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.data_aligned.track.pose_resampled.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.data_aligned.track.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data_aligned.track.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.data_aligned.track.channels.append(val1)
      start = end
      end += 72
      self.R = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.T = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 12
      (_x.dist_rot, _x.dist_trans,) = _struct_df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_dB = struct.Struct("<dB")
_struct_9d = struct.Struct("<9d")
_struct_3I = struct.Struct("<3I")
_struct_df = struct.Struct("<df")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
class AlignModelSrv(object):
  _type          = 'articulation_msgs/AlignModelSrv'
  _md5sum = '72514be7b9552a12ceffcc5039c793f3'
  _request_class  = AlignModelSrvRequest
  _response_class = AlignModelSrvResponse
