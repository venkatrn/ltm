"""autogenerated by genpy from articulation_msgs/ArticulatedObjectMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import visualization_msgs.msg
import articulation_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class ArticulatedObjectMsg(genpy.Message):
  _md5sum = "e76ceea8d39bebe2f3b084acdff7a807"
  _type = "articulation_msgs/ArticulatedObjectMsg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

articulation_msgs/TrackMsg[] parts    # observed trajectories for each object part 
articulation_msgs/ParamMsg[] params   # global parameters
articulation_msgs/ModelMsg[] models	  # models, describing relationships between parts
visualization_msgs/MarkerArray markers # marker visualization of models/object 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: articulation_msgs/TrackMsg
# Single kinematic trajectory
#
# This message contains a kinematic trajectory. The trajectory is specified
# as a vector of 6D poses. An additional flag, track_type, indicates whether
# the track is valid, and whether it includes orientation. The track id
# can be used for automatic coloring in the RVIZ track plugin, and can be 
# freely chosen by the client. 
#
# A model is fitting only from the trajectory stored in the pose[]-vector. 
# Additional information may be associated to each pose using the channels
# vector, with arbitrary # fields (e.g., to include applied/measured forces). 
#
# After model evaluation,
# also the associated configurations of the object are stored in the channels,
# named "q[0]".."q[DOF-1]", where DOF is the number of degrees of freedom.
# Model evaluation also projects the poses in the pose vector onto the model,
# and stores these ideal poses in the vector pose_projected. Further, during model
# evaluation, a new set of (uniform) configurations over the valid configuration
# range is sampled, and the result is stored in pose_resampled.
# The vector pose_flags contains additional display flags for the poses in the
# pose vector, for example, whether a pose is visible and/or
# the end of a trajectory segment. At the moment, this is only used by the
# prior_model_learner.
#

std_msgs/Header header                        # frame and timestamp
int32 id                                # used-specified track id

geometry_msgs/Pose[] pose               # sequence of poses, defining the observed trajectory
std_msgs/Header[] pose_headers                   # Timestamp and frame for each pose (and pose_projected)
geometry_msgs/Pose[] pose_projected     # sequence of poses, projected to the model 
                                        # (after model evaluation)
geometry_msgs/Pose[] pose_resampled     # sequence of poses, re-sampled from the model in
                                        # the valid configuration range
uint32[] pose_flags                     # bit-wise combination of POSE_VISIBLE and POSE_END_OF_SEGMENT

uint32 POSE_VISIBLE=1
uint32 POSE_END_OF_SEGMENT=2

# Each channel should have the same number of elements as pose array, 
# and the data in each channel should correspond 1:1 with each pose
# possible channels: "width", "height", "rgb", ...
sensor_msgs/ChannelFloat32[] channels       



================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/ChannelFloat32
# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values

================================================================================
MSG: articulation_msgs/ParamMsg
# Single parameter passed to or from model fitting
#
# This mechanism allows to flexibly pass parameters to 
# model fitting (and vice versa). Note that these parameters 
# are model-specific: A client may supply additional
# parameters to the model estimator, and, similarly, a estimator
# may add the estimated model parameters to the model message.
# When the model is then evaluated, for example to make predictions
# or to compute the likelihood, the model class can then use
# these parameters.
#
# A parameter has a name, a value, and a type. The type globally
# indicates whether it is a prior parameter (prior to model fitting),
# or a model parameter (found during model fitting, using a maximum-
# likelihood estimator), or a cached evaluation (e.g., the likelihood
# or the BIC are a typical "side"-product of model estimation, and
# can therefore already be cached).
#
# For a list of currently used parameters, see the documentation at
# http://www.ros.org/wiki/articulation_models
#

uint8 PRIOR=0   # indicates a prior model parameter 
                # (e.g., "sigma_position")
uint8 PARAM=1   # indicates a estimated model parameter 
                # (e.g., "rot_radius", the estimated radius)
uint8 EVAL=2    # indicates a cached evaluation of the model, given 
                # the current trajectory
                # (e.g., "loglikelihood", the log likelihood of the
                # data, given the model and its parameters)

string name     # name of the parameter
float64 value   # value of the parameter
uint8 type      # type of the parameter (PRIOR, PARAM, EVAL)


================================================================================
MSG: articulation_msgs/ModelMsg
# Single kinematic model
#
# A kinematic model is defined by its model class name, and a set of parameters. 
# The client may additionally specify a model id, that can be used to colorize the
# model when visualized using the RVIZ model display.
# 
# For a list of currently implemented models, see the documetation at
# http://www.ros.org/wiki/articulation_models
#
#

std_msgs/Header header                        # frame and timestamp

int32 id                             # user specified model id
string name                          # name of the model family (e.g. "rotational",
                                     # "prismatic", "pca-gp", "rigid")
articulation_msgs/ParamMsg[] params  # model parameters
articulation_msgs/TrackMsg track     # trajectory from which the model is estimated, or
                                     # that is evaluated using the model

================================================================================
MSG: visualization_msgs/MarkerArray
Marker[] markers

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

"""
  __slots__ = ['header','parts','params','models','markers']
  _slot_types = ['std_msgs/Header','articulation_msgs/TrackMsg[]','articulation_msgs/ParamMsg[]','articulation_msgs/ModelMsg[]','visualization_msgs/MarkerArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,parts,params,models,markers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArticulatedObjectMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parts is None:
        self.parts = []
      if self.params is None:
        self.params = []
      if self.models is None:
        self.models = []
      if self.markers is None:
        self.markers = visualization_msgs.msg.MarkerArray()
    else:
      self.header = std_msgs.msg.Header()
      self.parts = []
      self.params = []
      self.models = []
      self.markers = visualization_msgs.msg.MarkerArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.parts)
      buff.write(_struct_I.pack(length))
      for val1 in self.parts:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.id))
        length = len(val1.pose)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose:
          _v3 = val2.position
          _x = _v3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v4 = val2.orientation
          _x = _v4
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_headers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_headers:
          buff.write(_struct_I.pack(val2.seq))
          _v5 = val2.stamp
          _x = _v5
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.pose_projected)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_projected:
          _v6 = val2.position
          _x = _v6
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v7 = val2.orientation
          _x = _v7
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_resampled)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_resampled:
          _v8 = val2.position
          _x = _v8
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v9 = val2.orientation
          _x = _v9
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.pose_flags))
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.values))
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      length = len(self.models)
      buff.write(_struct_I.pack(length))
      for val1 in self.models:
        _v10 = val1.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.id))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        for val2 in val1.params:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_dB.pack(_x.value, _x.type))
        _v12 = val1.track
        _v13 = _v12.header
        buff.write(_struct_I.pack(_v13.seq))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(_v12.id))
        length = len(_v12.pose)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.pose:
          _v15 = val3.position
          _x = _v15
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v12.pose_headers)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.pose_headers:
          buff.write(_struct_I.pack(val3.seq))
          _v17 = val3.stamp
          _x = _v17
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v12.pose_projected)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.pose_projected:
          _v18 = val3.position
          _x = _v18
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v19 = val3.orientation
          _x = _v19
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v12.pose_resampled)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.pose_resampled:
          _v20 = val3.position
          _x = _v20
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v21 = val3.orientation
          _x = _v21
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v12.pose_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *_v12.pose_flags))
        length = len(_v12.channels)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.channels:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val3.values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val3.values))
      length = len(self.markers.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers.markers:
        _v22 = val1.header
        buff.write(_struct_I.pack(_v22.seq))
        _v23 = _v22.stamp
        _x = _v23
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v22.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
        _v24 = val1.pose
        _v25 = _v24.position
        _x = _v25
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v26 = _v24.orientation
        _x = _v26
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v27 = val1.scale
        _x = _v27
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v28 = val1.color
        _x = _v28
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _v29 = val1.lifetime
        _x = _v29
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_B.pack(val1.frame_locked))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.colors:
          _x = val2
          buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.mesh_use_embedded_materials))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parts is None:
        self.parts = None
      if self.params is None:
        self.params = None
      if self.models is None:
        self.models = None
      if self.markers is None:
        self.markers = visualization_msgs.msg.MarkerArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parts = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.TrackMsg()
        _v30 = val1.header
        start = end
        end += 4
        (_v30.seq,) = _struct_I.unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8')
        else:
          _v30.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v32 = val2.position
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v33 = val2.orientation
          _x = _v33
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_headers = []
        for i in range(0, length):
          val2 = std_msgs.msg.Header()
          start = end
          end += 4
          (val2.seq,) = _struct_I.unpack(str[start:end])
          _v34 = val2.stamp
          _x = _v34
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.frame_id = str[start:end].decode('utf-8')
          else:
            val2.frame_id = str[start:end]
          val1.pose_headers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_projected = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v35 = val2.position
          _x = _v35
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v36 = val2.orientation
          _x = _v36
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose_projected.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_resampled = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v37 = val2.position
          _x = _v37
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v38 = val2.orientation
          _x = _v38
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose_resampled.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pose_flags = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.ChannelFloat32()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.values = struct.unpack(pattern, str[start:end])
          val1.channels.append(val2)
        self.parts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.params.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.models = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ModelMsg()
        _v39 = val1.header
        start = end
        end += 4
        (_v39.seq,) = _struct_I.unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.params = []
        for i in range(0, length):
          val2 = articulation_msgs.msg.ParamMsg()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
          val1.params.append(val2)
        _v41 = val1.track
        _v42 = _v41.header
        start = end
        end += 4
        (_v42.seq,) = _struct_I.unpack(str[start:end])
        _v43 = _v42.stamp
        _x = _v43
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v42.frame_id = str[start:end].decode('utf-8')
        else:
          _v42.frame_id = str[start:end]
        start = end
        end += 4
        (_v41.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.pose = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v44 = val3.position
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v45 = val3.orientation
          _x = _v45
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v41.pose.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.pose_headers = []
        for i in range(0, length):
          val3 = std_msgs.msg.Header()
          start = end
          end += 4
          (val3.seq,) = _struct_I.unpack(str[start:end])
          _v46 = val3.stamp
          _x = _v46
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.frame_id = str[start:end].decode('utf-8')
          else:
            val3.frame_id = str[start:end]
          _v41.pose_headers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.pose_projected = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v47 = val3.position
          _x = _v47
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v48 = val3.orientation
          _x = _v48
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v41.pose_projected.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.pose_resampled = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v49 = val3.position
          _x = _v49
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v50 = val3.orientation
          _x = _v50
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v41.pose_resampled.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        _v41.pose_flags = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.channels = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.ChannelFloat32()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val3.values = struct.unpack(pattern, str[start:end])
          _v41.channels.append(val3)
        self.models.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers.markers = []
      for i in range(0, length):
        val1 = visualization_msgs.msg.Marker()
        _v51 = val1.header
        start = end
        end += 4
        (_v51.seq,) = _struct_I.unpack(str[start:end])
        _v52 = _v51.stamp
        _x = _v52
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.frame_id = str[start:end].decode('utf-8')
        else:
          _v51.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ns = str[start:end].decode('utf-8')
        else:
          val1.ns = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
        _v53 = val1.pose
        _v54 = _v53.position
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v55 = _v53.orientation
        _x = _v55
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v56 = val1.scale
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v57 = val1.color
        _x = _v57
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        _v58 = val1.lifetime
        _x = _v58
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 1
        (val1.frame_locked,) = _struct_B.unpack(str[start:end])
        val1.frame_locked = bool(val1.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.colors = []
        for i in range(0, length):
          val2 = std_msgs.msg.ColorRGBA()
          _x = val2
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
          val1.colors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mesh_resource = str[start:end].decode('utf-8')
        else:
          val1.mesh_resource = str[start:end]
        start = end
        end += 1
        (val1.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
        val1.mesh_use_embedded_materials = bool(val1.mesh_use_embedded_materials)
        self.markers.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.parts)
      buff.write(_struct_I.pack(length))
      for val1 in self.parts:
        _v59 = val1.header
        buff.write(_struct_I.pack(_v59.seq))
        _v60 = _v59.stamp
        _x = _v60
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v59.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.id))
        length = len(val1.pose)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose:
          _v61 = val2.position
          _x = _v61
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v62 = val2.orientation
          _x = _v62
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_headers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_headers:
          buff.write(_struct_I.pack(val2.seq))
          _v63 = val2.stamp
          _x = _v63
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val2.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.pose_projected)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_projected:
          _v64 = val2.position
          _x = _v64
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v65 = val2.orientation
          _x = _v65
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_resampled)
        buff.write(_struct_I.pack(length))
        for val2 in val1.pose_resampled:
          _v66 = val2.position
          _x = _v66
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v67 = val2.orientation
          _x = _v67
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.pose_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.pose_flags.tostring())
        length = len(val1.channels)
        buff.write(_struct_I.pack(length))
        for val2 in val1.channels:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.values.tostring())
      length = len(self.params)
      buff.write(_struct_I.pack(length))
      for val1 in self.params:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_dB.pack(_x.value, _x.type))
      length = len(self.models)
      buff.write(_struct_I.pack(length))
      for val1 in self.models:
        _v68 = val1.header
        buff.write(_struct_I.pack(_v68.seq))
        _v69 = _v68.stamp
        _x = _v69
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v68.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.id))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.params)
        buff.write(_struct_I.pack(length))
        for val2 in val1.params:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_dB.pack(_x.value, _x.type))
        _v70 = val1.track
        _v71 = _v70.header
        buff.write(_struct_I.pack(_v71.seq))
        _v72 = _v71.stamp
        _x = _v72
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v71.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(_v70.id))
        length = len(_v70.pose)
        buff.write(_struct_I.pack(length))
        for val3 in _v70.pose:
          _v73 = val3.position
          _x = _v73
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v74 = val3.orientation
          _x = _v74
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v70.pose_headers)
        buff.write(_struct_I.pack(length))
        for val3 in _v70.pose_headers:
          buff.write(_struct_I.pack(val3.seq))
          _v75 = val3.stamp
          _x = _v75
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = val3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v70.pose_projected)
        buff.write(_struct_I.pack(length))
        for val3 in _v70.pose_projected:
          _v76 = val3.position
          _x = _v76
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v77 = val3.orientation
          _x = _v77
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v70.pose_resampled)
        buff.write(_struct_I.pack(length))
        for val3 in _v70.pose_resampled:
          _v78 = val3.position
          _x = _v78
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v79 = val3.orientation
          _x = _v79
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v70.pose_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v70.pose_flags.tostring())
        length = len(_v70.channels)
        buff.write(_struct_I.pack(length))
        for val3 in _v70.channels:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val3.values)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val3.values.tostring())
      length = len(self.markers.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers.markers:
        _v80 = val1.header
        buff.write(_struct_I.pack(_v80.seq))
        _v81 = _v80.stamp
        _x = _v81
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v80.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
        _v82 = val1.pose
        _v83 = _v82.position
        _x = _v83
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v84 = _v82.orientation
        _x = _v84
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v85 = val1.scale
        _x = _v85
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v86 = val1.color
        _x = _v86
        buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _v87 = val1.lifetime
        _x = _v87
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_B.pack(val1.frame_locked))
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.colors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.colors:
          _x = val2
          buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.mesh_use_embedded_materials))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.parts is None:
        self.parts = None
      if self.params is None:
        self.params = None
      if self.models is None:
        self.models = None
      if self.markers is None:
        self.markers = visualization_msgs.msg.MarkerArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.parts = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.TrackMsg()
        _v88 = val1.header
        start = end
        end += 4
        (_v88.seq,) = _struct_I.unpack(str[start:end])
        _v89 = _v88.stamp
        _x = _v89
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.frame_id = str[start:end].decode('utf-8')
        else:
          _v88.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v90 = val2.position
          _x = _v90
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v91 = val2.orientation
          _x = _v91
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_headers = []
        for i in range(0, length):
          val2 = std_msgs.msg.Header()
          start = end
          end += 4
          (val2.seq,) = _struct_I.unpack(str[start:end])
          _v92 = val2.stamp
          _x = _v92
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.frame_id = str[start:end].decode('utf-8')
          else:
            val2.frame_id = str[start:end]
          val1.pose_headers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_projected = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v93 = val2.position
          _x = _v93
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v94 = val2.orientation
          _x = _v94
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose_projected.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.pose_resampled = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v95 = val2.position
          _x = _v95
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v96 = val2.orientation
          _x = _v96
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.pose_resampled.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.channels = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.ChannelFloat32()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.channels.append(val2)
        self.parts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.params = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ParamMsg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
        self.params.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.models = []
      for i in range(0, length):
        val1 = articulation_msgs.msg.ModelMsg()
        _v97 = val1.header
        start = end
        end += 4
        (_v97.seq,) = _struct_I.unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8')
        else:
          _v97.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.params = []
        for i in range(0, length):
          val2 = articulation_msgs.msg.ParamMsg()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.value, _x.type,) = _struct_dB.unpack(str[start:end])
          val1.params.append(val2)
        _v99 = val1.track
        _v100 = _v99.header
        start = end
        end += 4
        (_v100.seq,) = _struct_I.unpack(str[start:end])
        _v101 = _v100.stamp
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.frame_id = str[start:end].decode('utf-8')
        else:
          _v100.frame_id = str[start:end]
        start = end
        end += 4
        (_v99.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.pose = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v102 = val3.position
          _x = _v102
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v103 = val3.orientation
          _x = _v103
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v99.pose.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.pose_headers = []
        for i in range(0, length):
          val3 = std_msgs.msg.Header()
          start = end
          end += 4
          (val3.seq,) = _struct_I.unpack(str[start:end])
          _v104 = val3.stamp
          _x = _v104
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.frame_id = str[start:end].decode('utf-8')
          else:
            val3.frame_id = str[start:end]
          _v99.pose_headers.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.pose_projected = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v105 = val3.position
          _x = _v105
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v106 = val3.orientation
          _x = _v106
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v99.pose_projected.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.pose_resampled = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v107 = val3.position
          _x = _v107
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v108 = val3.orientation
          _x = _v108
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v99.pose_resampled.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        _v99.pose_flags = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.channels = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.ChannelFloat32()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val3.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          _v99.channels.append(val3)
        self.models.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers.markers = []
      for i in range(0, length):
        val1 = visualization_msgs.msg.Marker()
        _v109 = val1.header
        start = end
        end += 4
        (_v109.seq,) = _struct_I.unpack(str[start:end])
        _v110 = _v109.stamp
        _x = _v110
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v109.frame_id = str[start:end].decode('utf-8')
        else:
          _v109.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ns = str[start:end].decode('utf-8')
        else:
          val1.ns = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
        _v111 = val1.pose
        _v112 = _v111.position
        _x = _v112
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v113 = _v111.orientation
        _x = _v113
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v114 = val1.scale
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v115 = val1.color
        _x = _v115
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
        _v116 = val1.lifetime
        _x = _v116
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 1
        (val1.frame_locked,) = _struct_B.unpack(str[start:end])
        val1.frame_locked = bool(val1.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.colors = []
        for i in range(0, length):
          val2 = std_msgs.msg.ColorRGBA()
          _x = val2
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
          val1.colors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.mesh_resource = str[start:end].decode('utf-8')
        else:
          val1.mesh_resource = str[start:end]
        start = end
        end += 1
        (val1.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
        val1.mesh_use_embedded_materials = bool(val1.mesh_use_embedded_materials)
        self.markers.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_dB = struct.Struct("<dB")
_struct_3i = struct.Struct("<3i")
_struct_2i = struct.Struct("<2i")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
